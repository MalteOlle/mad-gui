import os
import platform
import shutil
from pathlib import Path

DOIT_CONFIG = {
    "default_tasks": ["format", "lint", "test"],
    "backend": "json",
}

HERE = Path(__file__).parent


def task_format():
    """Reformat all files using black."""
    print(HERE)
    return {"actions": ["isort -y ", ["black", HERE]], "verbosity": 1}


def task_format_check():
    """Check, but not change, formatting using black."""
    return {"actions": [["black", HERE, "--check"]], "verbosity": 1}


def task_lint():
    """Lint all files with Prospector."""
    return {"actions": [["prospector"]], "verbosity": 1}


def task_test():
    """Run Pytest with coverage."""
    return {
        "actions": [["pytest", "--cov=mad_gui", "--cov-config=.coveragerc", "-vv"]],
        "verbosity": 2,
    }


def task_docs():
    """Build the documentation."""
    # Copy the README into the docs folder
    shutil.copy(str(HERE / "README.md"), str(HERE / "docs"))
    # Delete Autogenerated files from previous run
    shutil.rmtree(str(HERE / "docs/_build"), ignore_errors=True)
    # Copy the images into the docs folder
    os.makedirs(HERE / "docs/_build/html/images/")
    for file in list((HERE / "docs/res/images/").glob("*")):
        shutil.copy(str(file), str(HERE / "docs/_build/html/images/" / str(file).split(os.sep)[-1]))

    # Copy the image buttons
    for file in list((HERE / "mad_gui/qt_designer/images").glob("*.png")):
        shutil.copy(str(file), str(HERE / "docs/_build/html/images/" / str(file).split(os.sep)[-1]))

    if platform.system() == "Windows":
        return {"actions": [[HERE / "docs/make.bat", "html"]], "verbosity": 2}
    else:
        return {"actions": [["make", "-C", HERE / "docs", "html"]], "verbosity": 2}
